name: Docker CI


env:
  DOCKER_REACT_TEST: oldbonedocker/react-test
  DOCKER_MULTI_CLNT: oldbonedocker/multi-deploy:client
  DOCKER_MULTI_NGNX: oldbonedocker/multi-deploy:nginx
  DOCKER_MULTI_SRVS: oldbonedocker/multi-deploy:server
  DOCKER_MULTI_WRKS: oldbonedocker/multi-deploy:worker
  IMAGE_TAG: ${{ github.sha }}


on:
  push:
    branches:
      - production
      - feature/*
  pull_request:
     types: [opened, synchronize, reopened]
     branches:
      - production

jobs:
  git-leaks:
    name: secrets detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        docker_images: [ oldbonedocker/react-test ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - run: >-
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
      - run:
          docker build -t $DOCKER_REACT_TEST -f ./client/Dockerfile.dev ./client
      - run: docker run -e CI=true $DOCKER_REACT_TEST npm test
      - run: docker build -t $DOCKER_MULTI_CLNT ./client
      - run: docker build -t $DOCKER_MULTI_NGNX ./nginx
      - run: docker build -t $DOCKER_MULTI_SRVS ./server
      - run: docker build -t $DOCKER_MULTI_WRKS ./worker
      - run: >-
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
      - run: docker push $DOCKER_MULTI_CLNT
      - run: docker push $DOCKER_MULTI_NGNX
      - run: docker push $DOCKER_MULTI_SRVS
      - run: docker push $DOCKER_MULTI_WRKS

  SAST:
    name: vulnerability scan
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: build docker images to scan
        run: |
          docker build -t $DOCKER_REACT_TEST -f ./client/Dockerfile.dev ./client
          docker build -t $DOCKER_MULTI_CLNT ./client
          docker build -t $DOCKER_MULTI_NGNX ./nginx
          docker build -t $DOCKER_MULTI_SRVS ./server
          docker build -t $DOCKER_MULTI_WRKS ./worker
      - name: devsasttst
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/oldbonedocker/react-test"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
      - name: clientscan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/oldbonedocker/multi-deploy:client"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
      - name: frontendscan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/oldbonedocker/multi-deploy:nginx"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
      - name: srvscan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/oldbonedocker/multi-deploy:server"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
      - name: workerscan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/oldbonedocker/multi-deploy:worker"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"

  sonarcloud:
    name: SonarCloud
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#  zap_scan:
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    name: Scan the webapplication
#    steps:
#      - name: ZAP Scan
#        uses: zaproxy/action-full-scan@v0.4.0
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          docker_name: "owasp/zap2docker-stable"
#          target: "https://${{ needs.deploy.outputs.service-url }}"
#          rules_file_name: ".zap/rules.tsv"
#          cmd_options: "-a"
